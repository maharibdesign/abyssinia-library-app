---
// src/pages/favorites.astro
import MainLayout from '../layouts/MainLayout.astro';
import { getCollection } from 'astro:content';

// Fetch all summaries so the script below has data to work with.
const allSummaries = await getCollection('summaries');
---

<MainLayout title="My Favorites">
  <h1 class="page-title">My Favorites</h1>
  <p id="no-favorites-message" style="display: none;">You haven't favorited any summaries yet. Go back <a href="/">home</a> to find some!</p>

  <div class="summary-grid" id="favorites-grid">
    <!-- This template is a blueprint for the script to create cards. -->
    <template id="favorite-card-template">
      <a href="" class="summary-card">
        <button class="favorite-btn" aria-label="Favorite this book">
          <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
            <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
          </svg>
        </button>
        <div class="card-content">
          <h2 class="card-title"></h2>
          <p class="card-author"></p>
          <p class="card-description"></p>
          <span class="card-category"></span>
        </div>
      </a>
    </template>
  </div>
</MainLayout>

<!-- This script is now fully self-contained -->
<script define:vars={{ allSummaries }}>
  import { favoriteSummaries, toggleFavorite } from '../lib/favoritesStore';
  import { triggerImpact } from '../lib/telegram'; // Import haptics

  const grid = document.getElementById('favorites-grid');
  const template = document.getElementById('favorite-card-template');
  const noFavoritesMessage = document.getElementById('no-favorites-message');

  function renderFavorites() {
    const favorites = favoriteSummaries.get();
    const favoriteSlugs = Object.keys(favorites);
    
    grid.innerHTML = ''; // Clear the grid before re-rendering

    if (favoriteSlugs.length === 0) {
      noFavoritesMessage.style.display = 'block';
    } else {
      noFavoritesMessage.style.display = 'none';
    }

    const favoritedSummaries = allSummaries.filter(summary => favoriteSlugs.includes(summary.slug));

    favoritedSummaries.forEach(summary => {
      const cardFragment = template.content.cloneNode(true);
      const card = cardFragment.firstElementChild;
      
      card.href = `/summaries/${summary.slug}`;
      card.querySelector('.card-title').textContent = summary.data.title;
      card.querySelector('.card-author').textContent = `by ${summary.data.author}`;
      card.querySelector('.card-description').textContent = summary.data.description;
      card.querySelector('.card-category').textContent = summary.data.category;
      
      const favButton = card.querySelector('.favorite-btn');
      favButton.dataset.bookSlug = summary.slug;
      
      if (favorites[summary.slug]) {
        favButton.classList.add('favorited');
      }

      grid.appendChild(card);
    });
  }

  // This single event listener on the grid handles all button clicks inside it.
  grid.addEventListener('click', (e) => {
    const button = e.target.closest('.favorite-btn');
    if (button) {
      e.preventDefault();
      e.stopPropagation();
      triggerImpact('medium'); // Haptic feedback
      const slug = button.dataset.bookSlug;
      if (slug) {
        toggleFavorite(slug);
      }
    }
  });
  
  // This listens for any change to the favorites and triggers a re-render.
  // This is what makes the page update instantly when a favorite is removed.
  favoriteSummaries.listen(renderFavorites);
  
  // Render the list when the page first loads.
  renderFavorites();
</script>

<style is:global>
  /* Global styles for cards to ensure consistency */
  .page-title { border-bottom: 1px solid var(--color-border); padding-bottom: 0.5rem; margin-bottom: 2rem; }
  .summary-grid { display: grid; grid-template-columns: 1fr; gap: 1.5rem; }
  @media (min-width: 640px) { .summary-grid { grid-template-columns: repeat(2, 1fr); } }
  .summary-card { position: relative; display: block; background-color: var(--color-card-bg); border: 1px solid var(--color-border); border-radius: 6px; padding: 1.5rem; text-decoration: none; color: var(--color-text); transition: transform 0.2s ease, border-color 0.2s ease; display: flex; flex-direction: column; }
  .summary-card:hover { transform: translateY(-5px); border-color: var(--color-primary); }
  .card-content { flex-grow: 1; display: flex; flex-direction: column; }
  .card-title { margin: 0 0 0.25rem 0; font-size: 1.25rem; }
  .card-author { margin: 0 0 1rem 0; color: #8b949e; }
  .card-description { font-size: 0.9rem; color: #8b949e; flex-grow: 1; }
  .card-category { font-size: 0.8rem; background-color: var(--color-border); color: #c9d1d9; padding: 4px 8px; border-radius: 20px; border: 1px solid #30363d; align-self: flex-start; }
</style>